/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Report;

import Model.Report.CustomerReport;
import Model.Event;
import Model.Report.EventReport;
import Model.Report.VolunteerReport;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.event.RowSorterEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author evelynzu
 */
public class Report extends javax.swing.JPanel {

    /**
     * Creates new form Report
     */
    javax.swing.JPanel CardSequencePanel;
    
    DefaultTableModel modelCustomer;
    TableRowSorter rowSorterCustomer;
    ArrayList<CustomerReport> customerReports;

    DefaultTableModel modelEvent;
    TableRowSorter RowSorterEvent;
    ArrayList<EventReport> eventReports;
    
    DefaultTableModel modelVolunteer;
    TableRowSorter RowSorterVolunteer;
    ArrayList<VolunteerReport> volunteerReports;
    
    
    
    
    public Report(JPanel clp) {
        this.CardSequencePanel = clp;
        initComponents();
        
        customerReports = new ArrayList<>();
        dbGetCustomerReport();
        populateCustomerTable();
        rowSorterCustomer = new TableRowSorter(modelCustomer);
        tblCustomer.setRowSorter(rowSorterCustomer);
        
        eventReports = new ArrayList<>();
        dbGetEventReport();
        populateEventTable();
        
        volunteerReports = new ArrayList<>();
        dbGetVolunteerReport();
        populateVolunteerTable();
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomer = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEvent = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblVolunteer = new javax.swing.JTable();

        tblCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "CustomerId", "Total spending"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCustomer);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Valuable customer", jPanel1);

        tblEvent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Event", "Revenue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblEvent);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Valuable event", jPanel2);

        tblVolunteer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Volunteer ID", "Volunteering times"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblVolunteer);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(205, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jTabbedPane1.addTab("Active Volunteer", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblCustomer;
    private javax.swing.JTable tblEvent;
    private javax.swing.JTable tblVolunteer;
    // End of variables declaration//GEN-END:variables

    public void dbGetCustomerReport(){
        try{  
            Class.forName("com.mysql.cj.jdbc.Driver");  
            Connection con=DriverManager.getConnection(  
            "jdbc:mysql://localhost:3306/ems_5100","root","root");   
            Statement stmt=con.createStatement();  
            ResultSet rs=stmt.executeQuery("SELECT customer_id, SUM(money) AS \"total_spend\" FROM payment GROUP BY customer_id ORDER BY SUM(money) DESC;"); 
            
            
            while(rs.next()) {
                CustomerReport customerReport = new CustomerReport();
                customerReport.setCustomerId(rs.getString("customer_id"));
                customerReport.setTotalSpend(rs.getString("total_spend"));
                customerReports.add(customerReport);
  
            }

            rs.close();
            con.close();  
            }catch(Exception e){ System.out.println(e);}  
    }

    
    public void populateCustomerTable() {
        modelCustomer = (DefaultTableModel) tblCustomer.getModel();
        System.out.println("11");
        modelCustomer.setRowCount(0);
        System.out.println("2");
        for(CustomerReport cr: customerReports) {
            System.out.println("3");
            
            Object[] row = new Object[2];
            row[0] = cr.getCustomerId();
            row[1] = cr.getTotalSpend();

            modelCustomer.addRow(row);
        }
    }
    
       
    public void dbGetEventReport(){
        try{  
            Class.forName("com.mysql.cj.jdbc.Driver");  
            Connection con=DriverManager.getConnection(  
            "jdbc:mysql://localhost:3306/ems_5100","root","root");   
            Statement stmt=con.createStatement();  
            ResultSet rs=stmt.executeQuery("SELECT event_id, SUM(money) AS \"event_revenue\" FROM payment GROUP BY event_id ORDER BY SUM(money) DESC;"); 

            while(rs.next()) {
                EventReport eventReport = new EventReport();
                eventReport.setEventId(rs.getString("event_id"));
                eventReport.setEventRevenue(rs.getString("event_revenue"));
                eventReports.add(eventReport);
            }

            rs.close();
            con.close();  
            }catch(Exception e){ System.out.println(e);}  
    }  
     
     
    public void populateEventTable() {
        modelEvent = (DefaultTableModel) tblEvent.getModel();
        modelEvent.setRowCount(0);
        for(EventReport er: eventReports) {
            
            Object[] row = new Object[2];
            row[0] = er.getEventId();
            row[1] = er.getEventRevenue();

            modelEvent.addRow(row);
        }
    }
    
    
    public void dbGetVolunteerReport(){
        try{  
            Class.forName("com.mysql.cj.jdbc.Driver");  
            Connection con=DriverManager.getConnection(  
            "jdbc:mysql://localhost:3306/ems_5100","root","root");   
            Statement stmt=con.createStatement();  
            ResultSet rs=stmt.executeQuery("SELECT user_id AS \"volunteer_id\", COUNT(user_id) AS \"volunteering_times\" FROM volunteer_history GROUP BY user_id;"); 

            while(rs.next()) {
                VolunteerReport volunteerReport = new VolunteerReport();
                volunteerReport.setVolunteerId(rs.getString("volunteer_id"));
                volunteerReport.setTimes(rs.getString("volunteering_times"));
                volunteerReports.add(volunteerReport);
            }

            rs.close();
            con.close();  
            }catch(Exception e){ System.out.println(e);}  
    }  
       
       
    public void populateVolunteerTable() {
        modelVolunteer = (DefaultTableModel) tblVolunteer.getModel();
        modelVolunteer.setRowCount(0);
        for(VolunteerReport vr: volunteerReports) {
            
            Object[] row = new Object[2];
            row[0] = vr.getVolunteerId();
            row[1] = vr.getTimes();

            modelVolunteer.addRow(row);
        }
    }
}
