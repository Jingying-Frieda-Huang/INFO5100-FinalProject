/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Bank;

import Model.Bank.Transfer;
import Model.Database;
import Model.TicketManager.PaymentRecord;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author evelynzu
 */
public class ProcessTransfer extends javax.swing.JPanel {

    /**
     * Creates new form BankGenerateTransferRecord
     */
    javax.swing.JPanel CardSequencePanel;
    
    DefaultTableModel model;
    TableRowSorter myTableRowSorter;
    Transfer selectedTransfer;
    ArrayList<Transfer> transfers;
    Database database;
    private String query;
    
    public ProcessTransfer(JPanel clp) {
        this.CardSequencePanel = clp;
        transfers= new ArrayList<>();
        database = new Database();
        
        initComponents();
        
        dbGetTransfer();
        populateTransferTable();
        sort(model);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransfer = new javax.swing.JTable();
        btnGeneratePaymentRecord = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(189, 212, 231));

        tblTransfer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "sender", "receiver", "type", "amount", "state", "event"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTransfer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTransferMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTransfer);

        btnGeneratePaymentRecord.setText("Confirm payment");
        btnGeneratePaymentRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneratePaymentRecordActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(btnGeneratePaymentRecord)))
                .addContainerGap(366, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(28, 28, 28)
                .addComponent(btnGeneratePaymentRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGeneratePaymentRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneratePaymentRecordActionPerformed
        String type = selectedTransfer.getType();
        if(type.equals("payment")){
            PaymentRecord record = new PaymentRecord();
            record.setId(selectedTransfer.getId()+(int)(Math.random()*100+1));
            record.setCustomer(selectedTransfer.getSender());
            record.setEvent(selectedTransfer.getEvent());
            record.setState("pending");
            generateRecord(record);    
            String sql = "UPDATE user_account " + "SET finance = finance + " + selectedTransfer.getAmount() + " WHERE user_id = " + selectedTransfer.getReceiver()+ ";";
            database.update(sql);
            String updateSender = "UPDATE user_account " + "SET finance = finance - " + selectedTransfer.getAmount() + " WHERE user_id = " + selectedTransfer.getSender()+ ";";
            database.update(updateSender);
            
            JOptionPane.showMessageDialog(this, "Transfer record generated successfully");
            
        } else if(type.equals("sponsorship") || type.equals("venue fee")) {
            String updateReceiver = "UPDATE user_account " + "SET finance = finance + " + selectedTransfer.getAmount() + " WHERE user_id = " + selectedTransfer.getReceiver()+ ";";
            System.out.println(updateReceiver);
            database.update(updateReceiver);
            String updateSender = "UPDATE user_account " + "SET finance = finance - " + selectedTransfer.getAmount() + " WHERE user_id = " + selectedTransfer.getSender()+ ";";
            database.update(updateSender);
        } 
        
        
        selectedTransfer.setState("completed");
        changeTransferState();
        populateTransferTable();
    
    }//GEN-LAST:event_btnGeneratePaymentRecordActionPerformed

    private void tblTransferMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTransferMouseClicked
        int selectedRowIndex = tblTransfer.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel();
        selectedTransfer = (Transfer)model.getValueAt(tblTransfer.convertRowIndexToModel(selectedRowIndex), 0); 
        
    }//GEN-LAST:event_tblTransferMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String text = tfSearch.getText();
        if (text.trim().length() == 0) {
     myTableRowSorter.setRowFilter(null);
  } else {
     myTableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblTransfer.getRowSorter();
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGeneratePaymentRecord;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTransfer;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

    public void populateTransferTable() {
        model = (DefaultTableModel) tblTransfer.getModel();
        model.setRowCount(0);
        for(Transfer p: transfers) {
            Object[] row = new Object[7];
            row[0] = p;
            row[1] = p.getSender();
            row[2] = p.getReceiver();
            row[3] = p.getType();
            row[4] = p.getAmount();
            row[5] = p.getState();
            row[6] = p.getEvent();
            model.addRow(row);
        }
    }
    
    public void sort(DefaultTableModel model) {
        myTableRowSorter = new TableRowSorter(model);
        tblTransfer.setRowSorter(myTableRowSorter);
        
    }
    
    
    public void dbGetTransfer(){
        try{  
            Class.forName("com.mysql.cj.jdbc.Driver");  
            Connection con=DriverManager.getConnection(  
            "jdbc:mysql://localhost:3306/ems_5100","root","root");  
            //here sonoo is database name, root is username and password  
            Statement stmt=con.createStatement();  
            ResultSet rs=stmt.executeQuery("select * from transfer");  
             
            while(rs.next()) {
                Transfer transfer = new Transfer();
                
                
                transfer.setId(rs.getString("id"));
                transfer.setSender(rs.getString("sender"));
                transfer.setReceiver(rs.getString("receiver"));
                transfer.setAmount(rs.getInt("amount"));
                transfer.setState(rs.getString("state"));
                transfer.setType(rs.getString("type"));
                transfer.setEvent(rs.getString("event"));
                
                
                
                System.out.println(transfer.getId());
                transfers.add(transfer);
            }

            rs.close();
            con.close();  
            }catch(Exception e){ System.out.println(e);}  
    }
    
    
    public void generateRecord(PaymentRecord record){
        String query = " insert into record (record_id, event_id, customer_id)"
        + " values ("+record.getId()+","+ record.getEvent()+ "," + record.getCustomer()+")";  
        System.out.print(query);
        database.insert(query);
    }
    
    public void changeTransferState(){
        String query="";
        String sql = "UPDATE transfer " + "SET state = '" + "completed" + "' WHERE id = '" + selectedTransfer.getId()+ "';";
        database.update(sql);
        
        //update the request records as soon as transfer is completed so the same is reflected 
        //to sponsor/venue models on their page 
        if (selectedTransfer.getType() == "sponsorship"){
            query= "update sponsor_request set status = 'Completed' where request_id = "+selectedTransfer.getRequestId();
        }
        else if (selectedTransfer.getType() == "venueBooking"){
            query= "update venue_request set status = 'Completed' where request_id = "+selectedTransfer.getRequestId();
        }
        
        database.update(query);
    }
}
